const { add, mul, sub, div } = require('./arith');
const { qase } = require('jest-qase-reporter/dist/jest');

describe("Test suite", () => {
  test('2 + 3 = 5 without qase wrapper', () => {
    expect(add(2, 3)).toBe(5);
  });

  test.skip('2 + 3 = 5 skipped', () => {
    expect(add(2, 3)).toBe(5);
  });

  test('2 + 3 = 6', () => {
    expect(add(2, 3)).toBe(6);
  });

  describe('Suite for the some nested cases', () => {
    test('Nested 1', () => {
      expect(add(2, 3)).toBe(5);
    });

    test.skip('2 + 3 = 5 skipped', () => {
      expect(add(2, 3)).toBe(5);
    });

    test('2 + 3 = 6 Wrong case', () => {
      expect(add(2, 3)).toBe(6);
    });

    test('Async test case', async () => {
      await new Promise((r) => setTimeout(r, 2000));
      expect(mul(3, 4)).toBe(12);
    });
  })

  describe("Test suite", () => {

    for (let i = 0; i <= 100; i++) {
      test(`${i} + ${i} autogenerated case`, () => {
        expect(add(i, i)).toBe(i * 2);
      });
    }

    test('2 + 3 = 5 without qase wrapper', () => {
      expect(add(2, 3)).toBe(5);
    });

    test.skip('2 + 3 = 5 skipped', () => {
      expect(add(2, 3)).toBe(5);
    });

    test('2 + 3 = 6', () => {
      expect(add(2, 3)).toBe(6);
    });

    describe('Suite for the some nested cases', () => {
      test('Nested 1', () => {
        expect(add(2, 3)).toBe(5);
      });

      test.skip('2 + 3 = 5 skipped', () => {
        expect(add(2, 3)).toBe(5);
      });

      test('2 + 3 = 6 Wrong case', () => {
        expect(add(2, 3)).toBe(6);
      });

      test('Async test case', async () => {
        await new Promise((r) => setTimeout(r, 2000));
        expect(mul(3, 4)).toBe(12);
      });
    })
  })
})
