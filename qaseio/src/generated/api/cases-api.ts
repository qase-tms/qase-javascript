/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BaseResponse } from '../model';
// @ts-ignore
import { Bulk200Response } from '../model';
// @ts-ignore
import { IdResponse } from '../model';
// @ts-ignore
import { TestCaseCreate } from '../model';
// @ts-ignore
import { TestCaseListResponse } from '../model';
// @ts-ignore
import { TestCaseResponse } from '../model';
// @ts-ignore
import { TestCaseUpdate } from '../model';
// @ts-ignore
import { TestCasebulk } from '../model';
// @ts-ignore
import { TestCaseexternalIssues } from '../model';
/**
 * CasesApi - axios parameter creator
 * @export
 */
export const CasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method allows to bulk create new test cases in a project. 
         * @summary Create test cases in bulk
         * @param {string} code Code of project, where to search entities.
         * @param {TestCasebulk} testCasebulk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulk: async (code: string, testCasebulk: TestCasebulk, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('bulk', 'code', code)
            // verify required parameter 'testCasebulk' is not null or undefined
            assertParamExists('bulk', 'testCasebulk', testCasebulk)
            const localVarPath = `/v1/case/{code}/bulk`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testCasebulk, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Attach the external issues to the test cases
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseexternalIssues} testCaseexternalIssues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseAttachExternalIssue: async (code: string, testCaseexternalIssues: TestCaseexternalIssues, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('caseAttachExternalIssue', 'code', code)
            // verify required parameter 'testCaseexternalIssues' is not null or undefined
            assertParamExists('caseAttachExternalIssue', 'testCaseexternalIssues', testCaseexternalIssues)
            const localVarPath = `/v1/case/{code}/external-issue/attach`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testCaseexternalIssues, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Detach the external issues from the test cases
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseexternalIssues} testCaseexternalIssues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseDetachExternalIssue: async (code: string, testCaseexternalIssues: TestCaseexternalIssues, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('caseDetachExternalIssue', 'code', code)
            // verify required parameter 'testCaseexternalIssues' is not null or undefined
            assertParamExists('caseDetachExternalIssue', 'testCaseexternalIssues', testCaseexternalIssues)
            const localVarPath = `/v1/case/{code}/external-issue/detach`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testCaseexternalIssues, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows to create a new test case in selected project. 
         * @summary Create a new test case
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseCreate} testCaseCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCase: async (code: string, testCaseCreate: TestCaseCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('createCase', 'code', code)
            // verify required parameter 'testCaseCreate' is not null or undefined
            assertParamExists('createCase', 'testCaseCreate', testCaseCreate)
            const localVarPath = `/v1/case/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testCaseCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method completely deletes a test case from repository. 
         * @summary Delete test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCase: async (code: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('deleteCase', 'code', code)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCase', 'id', id)
            const localVarPath = `/v1/case/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows to retrieve a specific test case. 
         * @summary Get a specific test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCase: async (code: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getCase', 'code', code)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCase', 'id', id)
            const localVarPath = `/v1/case/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows to retrieve all test cases stored in selected project. 
         * @summary Get all test cases
         * @param {string} code Code of project, where to search entities.
         * @param {string} [search] Provide a string that will be used to search by name.
         * @param {number} [milestoneId] ID of milestone.
         * @param {number} [suiteId] ID of test suite.
         * @param {string} [severity] A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial 
         * @param {string} [priority] A list of priority values separated by comma. Possible values: undefined, high, medium, low 
         * @param {string} [type] A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance 
         * @param {string} [behavior] A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive 
         * @param {string} [automation] A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated 
         * @param {string} [status] A list of values separated by comma. Possible values: actual, draft deprecated 
         * @param {'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app'} [externalIssuesType] An integration type. 
         * @param {Array<string>} [externalIssuesIds] A list of issue IDs.
         * @param {string} [include] A list of entities to include in response separated by comma. Possible values: external_issues. 
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCases: async (code: string, search?: string, milestoneId?: number, suiteId?: number, severity?: string, priority?: string, type?: string, behavior?: string, automation?: string, status?: string, externalIssuesType?: 'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app', externalIssuesIds?: Array<string>, include?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getCases', 'code', code)
            const localVarPath = `/v1/case/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (milestoneId !== undefined) {
                localVarQueryParameter['milestone_id'] = milestoneId;
            }

            if (suiteId !== undefined) {
                localVarQueryParameter['suite_id'] = suiteId;
            }

            if (severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }

            if (priority !== undefined) {
                localVarQueryParameter['priority'] = priority;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (behavior !== undefined) {
                localVarQueryParameter['behavior'] = behavior;
            }

            if (automation !== undefined) {
                localVarQueryParameter['automation'] = automation;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (externalIssuesType !== undefined) {
                localVarQueryParameter['external_issues[type]'] = externalIssuesType;
            }

            if (externalIssuesIds) {
                localVarQueryParameter['external_issues[ids][]'] = externalIssuesIds.join(COLLECTION_FORMATS.csv);
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method updates a test case. 
         * @summary Update test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {TestCaseUpdate} testCaseUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCase: async (code: string, id: number, testCaseUpdate: TestCaseUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updateCase', 'code', code)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCase', 'id', id)
            // verify required parameter 'testCaseUpdate' is not null or undefined
            assertParamExists('updateCase', 'testCaseUpdate', testCaseUpdate)
            const localVarPath = `/v1/case/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testCaseUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CasesApi - functional programming interface
 * @export
 */
export const CasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CasesApiAxiosParamCreator(configuration)
    return {
        /**
         * This method allows to bulk create new test cases in a project. 
         * @summary Create test cases in bulk
         * @param {string} code Code of project, where to search entities.
         * @param {TestCasebulk} testCasebulk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulk(code: string, testCasebulk: TestCasebulk, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bulk200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulk(code, testCasebulk, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Attach the external issues to the test cases
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseexternalIssues} testCaseexternalIssues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async caseAttachExternalIssue(code: string, testCaseexternalIssues: TestCaseexternalIssues, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.caseAttachExternalIssue(code, testCaseexternalIssues, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Detach the external issues from the test cases
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseexternalIssues} testCaseexternalIssues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async caseDetachExternalIssue(code: string, testCaseexternalIssues: TestCaseexternalIssues, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.caseDetachExternalIssue(code, testCaseexternalIssues, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows to create a new test case in selected project. 
         * @summary Create a new test case
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseCreate} testCaseCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCase(code: string, testCaseCreate: TestCaseCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCase(code, testCaseCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method completely deletes a test case from repository. 
         * @summary Delete test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCase(code: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCase(code, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows to retrieve a specific test case. 
         * @summary Get a specific test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCase(code: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCase(code, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows to retrieve all test cases stored in selected project. 
         * @summary Get all test cases
         * @param {string} code Code of project, where to search entities.
         * @param {string} [search] Provide a string that will be used to search by name.
         * @param {number} [milestoneId] ID of milestone.
         * @param {number} [suiteId] ID of test suite.
         * @param {string} [severity] A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial 
         * @param {string} [priority] A list of priority values separated by comma. Possible values: undefined, high, medium, low 
         * @param {string} [type] A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance 
         * @param {string} [behavior] A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive 
         * @param {string} [automation] A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated 
         * @param {string} [status] A list of values separated by comma. Possible values: actual, draft deprecated 
         * @param {'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app'} [externalIssuesType] An integration type. 
         * @param {Array<string>} [externalIssuesIds] A list of issue IDs.
         * @param {string} [include] A list of entities to include in response separated by comma. Possible values: external_issues. 
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCases(code: string, search?: string, milestoneId?: number, suiteId?: number, severity?: string, priority?: string, type?: string, behavior?: string, automation?: string, status?: string, externalIssuesType?: 'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app', externalIssuesIds?: Array<string>, include?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCaseListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCases(code, search, milestoneId, suiteId, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method updates a test case. 
         * @summary Update test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {TestCaseUpdate} testCaseUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCase(code: string, id: number, testCaseUpdate: TestCaseUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCase(code, id, testCaseUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CasesApi - factory interface
 * @export
 */
export const CasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CasesApiFp(configuration)
    return {
        /**
         * This method allows to bulk create new test cases in a project. 
         * @summary Create test cases in bulk
         * @param {string} code Code of project, where to search entities.
         * @param {TestCasebulk} testCasebulk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulk(code: string, testCasebulk: TestCasebulk, options?: any): AxiosPromise<Bulk200Response> {
            return localVarFp.bulk(code, testCasebulk, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Attach the external issues to the test cases
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseexternalIssues} testCaseexternalIssues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseAttachExternalIssue(code: string, testCaseexternalIssues: TestCaseexternalIssues, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.caseAttachExternalIssue(code, testCaseexternalIssues, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Detach the external issues from the test cases
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseexternalIssues} testCaseexternalIssues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseDetachExternalIssue(code: string, testCaseexternalIssues: TestCaseexternalIssues, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.caseDetachExternalIssue(code, testCaseexternalIssues, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to create a new test case in selected project. 
         * @summary Create a new test case
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseCreate} testCaseCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCase(code: string, testCaseCreate: TestCaseCreate, options?: any): AxiosPromise<IdResponse> {
            return localVarFp.createCase(code, testCaseCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method completely deletes a test case from repository. 
         * @summary Delete test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCase(code: string, id: number, options?: any): AxiosPromise<IdResponse> {
            return localVarFp.deleteCase(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve a specific test case. 
         * @summary Get a specific test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCase(code: string, id: number, options?: any): AxiosPromise<TestCaseResponse> {
            return localVarFp.getCase(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve all test cases stored in selected project. 
         * @summary Get all test cases
         * @param {string} code Code of project, where to search entities.
         * @param {string} [search] Provide a string that will be used to search by name.
         * @param {number} [milestoneId] ID of milestone.
         * @param {number} [suiteId] ID of test suite.
         * @param {string} [severity] A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial 
         * @param {string} [priority] A list of priority values separated by comma. Possible values: undefined, high, medium, low 
         * @param {string} [type] A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance 
         * @param {string} [behavior] A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive 
         * @param {string} [automation] A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated 
         * @param {string} [status] A list of values separated by comma. Possible values: actual, draft deprecated 
         * @param {'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app'} [externalIssuesType] An integration type. 
         * @param {Array<string>} [externalIssuesIds] A list of issue IDs.
         * @param {string} [include] A list of entities to include in response separated by comma. Possible values: external_issues. 
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCases(code: string, search?: string, milestoneId?: number, suiteId?: number, severity?: string, priority?: string, type?: string, behavior?: string, automation?: string, status?: string, externalIssuesType?: 'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app', externalIssuesIds?: Array<string>, include?: string, limit?: number, offset?: number, options?: any): AxiosPromise<TestCaseListResponse> {
            return localVarFp.getCases(code, search, milestoneId, suiteId, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * This method updates a test case. 
         * @summary Update test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {TestCaseUpdate} testCaseUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCase(code: string, id: number, testCaseUpdate: TestCaseUpdate, options?: any): AxiosPromise<IdResponse> {
            return localVarFp.updateCase(code, id, testCaseUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CasesApi - object-oriented interface
 * @export
 * @class CasesApi
 * @extends {BaseAPI}
 */
export class CasesApi extends BaseAPI {
    /**
     * This method allows to bulk create new test cases in a project. 
     * @summary Create test cases in bulk
     * @param {string} code Code of project, where to search entities.
     * @param {TestCasebulk} testCasebulk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    public bulk(code: string, testCasebulk: TestCasebulk, options?: AxiosRequestConfig) {
        return CasesApiFp(this.configuration).bulk(code, testCasebulk, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Attach the external issues to the test cases
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseexternalIssues} testCaseexternalIssues 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    public caseAttachExternalIssue(code: string, testCaseexternalIssues: TestCaseexternalIssues, options?: AxiosRequestConfig) {
        return CasesApiFp(this.configuration).caseAttachExternalIssue(code, testCaseexternalIssues, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Detach the external issues from the test cases
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseexternalIssues} testCaseexternalIssues 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    public caseDetachExternalIssue(code: string, testCaseexternalIssues: TestCaseexternalIssues, options?: AxiosRequestConfig) {
        return CasesApiFp(this.configuration).caseDetachExternalIssue(code, testCaseexternalIssues, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows to create a new test case in selected project. 
     * @summary Create a new test case
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseCreate} testCaseCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    public createCase(code: string, testCaseCreate: TestCaseCreate, options?: AxiosRequestConfig) {
        return CasesApiFp(this.configuration).createCase(code, testCaseCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method completely deletes a test case from repository. 
     * @summary Delete test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    public deleteCase(code: string, id: number, options?: AxiosRequestConfig) {
        return CasesApiFp(this.configuration).deleteCase(code, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows to retrieve a specific test case. 
     * @summary Get a specific test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    public getCase(code: string, id: number, options?: AxiosRequestConfig) {
        return CasesApiFp(this.configuration).getCase(code, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows to retrieve all test cases stored in selected project. 
     * @summary Get all test cases
     * @param {string} code Code of project, where to search entities.
     * @param {string} [search] Provide a string that will be used to search by name.
     * @param {number} [milestoneId] ID of milestone.
     * @param {number} [suiteId] ID of test suite.
     * @param {string} [severity] A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial 
     * @param {string} [priority] A list of priority values separated by comma. Possible values: undefined, high, medium, low 
     * @param {string} [type] A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance 
     * @param {string} [behavior] A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive 
     * @param {string} [automation] A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated 
     * @param {string} [status] A list of values separated by comma. Possible values: actual, draft deprecated 
     * @param {'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app'} [externalIssuesType] An integration type. 
     * @param {Array<string>} [externalIssuesIds] A list of issue IDs.
     * @param {string} [include] A list of entities to include in response separated by comma. Possible values: external_issues. 
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    public getCases(code: string, search?: string, milestoneId?: number, suiteId?: number, severity?: string, priority?: string, type?: string, behavior?: string, automation?: string, status?: string, externalIssuesType?: 'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app', externalIssuesIds?: Array<string>, include?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return CasesApiFp(this.configuration).getCases(code, search, milestoneId, suiteId, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method updates a test case. 
     * @summary Update test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {TestCaseUpdate} testCaseUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    public updateCase(code: string, id: number, testCaseUpdate: TestCaseUpdate, options?: AxiosRequestConfig) {
        return CasesApiFp(this.configuration).updateCase(code, id, testCaseUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
