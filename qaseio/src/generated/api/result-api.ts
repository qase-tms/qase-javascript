/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io TestOps API v2
 * Qase TestOps API v2 Specification.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateResultV2422Response } from '../model';
// @ts-ignore
import { CreateResultsRequestV2 } from '../model';
// @ts-ignore
import { ResultCreateV2 } from '../model';
/**
 * ResultApi - axios parameter creator
 * @export
 */
export const ResultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method allows to create single test run result.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
         * @summary (Beta) Create test run result
         * @param {string} projectCode 
         * @param {number} runId 
         * @param {ResultCreate} resultCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResultV2: async (projectCode: string, runId: number, resultCreate: ResultCreateV2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectCode' is not null or undefined
            assertParamExists('createResultV2', 'projectCode', projectCode)
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('createResultV2', 'runId', runId)
            // verify required parameter 'resultCreate' is not null or undefined
            assertParamExists('createResultV2', 'resultCreate', resultCreate)
            const localVarPath = `/v2/{project_code}/run/{run_id}/result`
                .replace(`{${"project_code"}}`, encodeURIComponent(String(projectCode)))
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resultCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows to create several test run results at once.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
         * @summary (Beta) Bulk create test run result
         * @param {string} projectCode 
         * @param {number} runId 
         * @param {CreateResultsRequestV2} createResultsRequestV2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResultsV2: async (projectCode: string, runId: number, createResultsRequestV2: CreateResultsRequestV2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectCode' is not null or undefined
            assertParamExists('createResultsV2', 'projectCode', projectCode)
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('createResultsV2', 'runId', runId)
            // verify required parameter 'createResultsRequestV2' is not null or undefined
            assertParamExists('createResultsV2', 'createResultsRequestV2', createResultsRequestV2)
            const localVarPath = `/v2/{project_code}/run/{run_id}/results`
                .replace(`{${"project_code"}}`, encodeURIComponent(String(projectCode)))
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createResultsRequestV2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResultApi - functional programming interface
 * @export
 */
export const ResultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResultApiAxiosParamCreator(configuration)
    return {
        /**
         * This method allows to create single test run result.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
         * @summary (Beta) Create test run result
         * @param {string} projectCode 
         * @param {number} runId 
         * @param {ResultCreate} resultCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResultV2(projectCode: string, runId: number, resultCreate: ResultCreateV2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResultV2(projectCode, runId, resultCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows to create several test run results at once.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
         * @summary (Beta) Bulk create test run result
         * @param {string} projectCode 
         * @param {number} runId 
         * @param {CreateResultsRequestV2} createResultsRequestV2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResultsV2(projectCode: string, runId: number, createResultsRequestV2: CreateResultsRequestV2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResultsV2(projectCode, runId, createResultsRequestV2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResultApi - factory interface
 * @export
 */
export const ResultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResultApiFp(configuration)
    return {
        /**
         * This method allows to create single test run result.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
         * @summary (Beta) Create test run result
         * @param {string} projectCode 
         * @param {number} runId 
         * @param {ResultCreate} resultCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResultV2(projectCode: string, runId: number, resultCreate: ResultCreateV2, options?: any): AxiosPromise<void> {
            return localVarFp.createResultV2(projectCode, runId, resultCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to create several test run results at once.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
         * @summary (Beta) Bulk create test run result
         * @param {string} projectCode 
         * @param {number} runId 
         * @param {CreateResultsRequestV2} createResultsRequestV2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResultsV2(projectCode: string, runId: number, createResultsRequestV2: CreateResultsRequestV2, options?: any): AxiosPromise<void> {
            return localVarFp.createResultsV2(projectCode, runId, createResultsRequestV2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResultApi - object-oriented interface
 * @export
 * @class ResultApi
 * @extends {BaseAPI}
 */
export class ResultApi extends BaseAPI {
    /**
     * This method allows to create single test run result.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
     * @summary (Beta) Create test run result
     * @param {string} projectCode 
     * @param {number} runId 
     * @param {ResultCreate} resultCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApi
     */
    public createResultV2(projectCode: string, runId: number, resultCreate: ResultCreateV2, options?: AxiosRequestConfig) {
        return ResultApiFp(this.configuration).createResultV2(projectCode, runId, resultCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows to create several test run results at once.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage. 
     * @summary (Beta) Bulk create test run result
     * @param {string} projectCode 
     * @param {number} runId 
     * @param {CreateResultsRequestV2} createResultsRequestV2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApi
     */
    public createResultsV2(projectCode: string, runId: number, createResultsRequestV2: CreateResultsRequestV2, options?: AxiosRequestConfig) {
        return ResultApiFp(this.configuration).createResultsV2(projectCode, runId, createResultsRequestV2, options).then((request) => request(this.axios, this.basePath));
    }
}
