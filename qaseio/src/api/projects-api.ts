/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProjectAccess } from '../model';
// @ts-ignore
import { ProjectCodeResponse } from '../model';
// @ts-ignore
import { ProjectCreate } from '../model';
// @ts-ignore
import { ProjectListResponse } from '../model';
// @ts-ignore
import { ProjectResponse } from '../model';
// @ts-ignore
import { Response } from '../model';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method is used to create a new project through API. 
         * @summary Create new project.
         * @param {ProjectCreate} projectCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (projectCreate: ProjectCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectCreate' is not null or undefined
            assertParamExists('createProject', 'projectCreate', projectCreate)
            const localVarPath = `/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows to delete a specific project. 
         * @summary Delete Project by code.
         * @param {string} code Code of project, where to search entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('deleteProject', 'code', code)
            const localVarPath = `/project/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows to retrieve a specific project. 
         * @summary Get Project by code.
         * @param {string} code Code of project, where to search entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getProject', 'code', code)
            const localVarPath = `/project/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows to retrieve all projects available for your account. You can limit and offset params to paginate. 
         * @summary Get All Projects.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows to grant access to a specific project. 
         * @summary Grant access to project by code.
         * @param {string} code Code of project, where to search entities.
         * @param {ProjectAccess} projectAccess 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantAccessToProject: async (code: string, projectAccess: ProjectAccess, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('grantAccessToProject', 'code', code)
            // verify required parameter 'projectAccess' is not null or undefined
            assertParamExists('grantAccessToProject', 'projectAccess', projectAccess)
            const localVarPath = `/project/{code}/access`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectAccess, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows to revoke access to a specific project. 
         * @summary Revoke access to project by code.
         * @param {string} code Code of project, where to search entities.
         * @param {ProjectAccess} projectAccess 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAccessToProject: async (code: string, projectAccess: ProjectAccess, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('revokeAccessToProject', 'code', code)
            // verify required parameter 'projectAccess' is not null or undefined
            assertParamExists('revokeAccessToProject', 'projectAccess', projectAccess)
            const localVarPath = `/project/{code}/access`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectAccess, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method is used to create a new project through API. 
         * @summary Create new project.
         * @param {ProjectCreate} projectCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(projectCreate: ProjectCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(projectCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows to delete a specific project. 
         * @summary Delete Project by code.
         * @param {string} code Code of project, where to search entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProject(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProject(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows to retrieve a specific project. 
         * @summary Get Project by code.
         * @param {string} code Code of project, where to search entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows to retrieve all projects available for your account. You can limit and offset params to paginate. 
         * @summary Get All Projects.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjects(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjects(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows to grant access to a specific project. 
         * @summary Grant access to project by code.
         * @param {string} code Code of project, where to search entities.
         * @param {ProjectAccess} projectAccess 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grantAccessToProject(code: string, projectAccess: ProjectAccess, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grantAccessToProject(code, projectAccess, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows to revoke access to a specific project. 
         * @summary Revoke access to project by code.
         * @param {string} code Code of project, where to search entities.
         * @param {ProjectAccess} projectAccess 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeAccessToProject(code: string, projectAccess: ProjectAccess, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeAccessToProject(code, projectAccess, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * This method is used to create a new project through API. 
         * @summary Create new project.
         * @param {ProjectCreate} projectCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(projectCreate: ProjectCreate, options?: any): AxiosPromise<ProjectCodeResponse> {
            return localVarFp.createProject(projectCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to delete a specific project. 
         * @summary Delete Project by code.
         * @param {string} code Code of project, where to search entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(code: string, options?: any): AxiosPromise<Response> {
            return localVarFp.deleteProject(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve a specific project. 
         * @summary Get Project by code.
         * @param {string} code Code of project, where to search entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(code: string, options?: any): AxiosPromise<ProjectResponse> {
            return localVarFp.getProject(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve all projects available for your account. You can limit and offset params to paginate. 
         * @summary Get All Projects.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(limit?: number, offset?: number, options?: any): AxiosPromise<ProjectListResponse> {
            return localVarFp.getProjects(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to grant access to a specific project. 
         * @summary Grant access to project by code.
         * @param {string} code Code of project, where to search entities.
         * @param {ProjectAccess} projectAccess 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantAccessToProject(code: string, projectAccess: ProjectAccess, options?: any): AxiosPromise<Response> {
            return localVarFp.grantAccessToProject(code, projectAccess, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to revoke access to a specific project. 
         * @summary Revoke access to project by code.
         * @param {string} code Code of project, where to search entities.
         * @param {ProjectAccess} projectAccess 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAccessToProject(code: string, projectAccess: ProjectAccess, options?: any): AxiosPromise<Response> {
            return localVarFp.revokeAccessToProject(code, projectAccess, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * This method is used to create a new project through API. 
     * @summary Create new project.
     * @param {ProjectCreate} projectCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public createProject(projectCreate: ProjectCreate, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).createProject(projectCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows to delete a specific project. 
     * @summary Delete Project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteProject(code: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).deleteProject(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows to retrieve a specific project. 
     * @summary Get Project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProject(code: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProject(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows to retrieve all projects available for your account. You can limit and offset params to paginate. 
     * @summary Get All Projects.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjects(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProjects(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows to grant access to a specific project. 
     * @summary Grant access to project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {ProjectAccess} projectAccess 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public grantAccessToProject(code: string, projectAccess: ProjectAccess, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).grantAccessToProject(code, projectAccess, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows to revoke access to a specific project. 
     * @summary Revoke access to project by code.
     * @param {string} code Code of project, where to search entities.
     * @param {ProjectAccess} projectAccess 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public revokeAccessToProject(code: string, projectAccess: ProjectAccess, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).revokeAccessToProject(code, projectAccess, options).then((request) => request(this.axios, this.basePath));
    }
}
