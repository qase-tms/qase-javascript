/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io API
 * # Introduction  You can use our API to access [Qase.io](https://qase.io) API endpoints, which allows to retrieve information about entities stored in database and perform actions with them. The API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer).  # API Rate limits  Your application can make up to 200 API requests per minute.  Once the limit is exceeded, clients receive an HTTP 429 with a Retry-After: X header to indicate how long their timeout period is before they will be able to send requests again. The timeout period is set to 60 seconds once the limit is exceeded.  # Authentication  To authorize, use this code:  ```shell # With shell, you can just pass the correct header with each request curl \"https://api.qase.io/v1/api_endpoint\"   -H \"Token: api_token\"   -H \"Content-Type: application/json\" ```  Make sure to replace `api_token` with your API key.  Qase.io uses API tokens to authenticate requests. You can view an manage your API keys in [API tokens pages](https://app.qase.io/user/api/token).  Your API keys has the same access rights as your role in the app, so be sure to keep them secure! Do not share your secret API keys in publicly accessible areas such as GitHub, client-side code, and so forth.  Qase API expects for the API key to be included in all API requests to the server in a header that looks like the following:  `Token: api_token`  You must replace `api_token` with your personal API key.  All API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Calls made over plain HTTP will fail. API requests without authentication will also fail.  # Access rights  Qase.io is using Role-based Access Control system to restrict some features usage in Web interface and the same rules are applied to API methods. In description for each method you will find a rule name, that is required to perform an action through API. If you don\'t have enough access rights, you will receive an error with `403` status code.  # Errors  Qase API uses the following error codes:  Code | Meaning ---------- | ------- 400 | Bad Request - Your request is invalid. 401 | Unauthorized - Your API key is wrong. 403 | Forbidden - Your role doesn\'t have enough permissions to perform this action 404 | Not Found - The resource could not be found. 405 | Method Not Allowed - You tried to access a resource with an invalid method. 406 | Not Acceptable - You requested a format that isn\'t json. 410 | Gone - The resource requested has been removed from our servers. 429 | Too Many Requests - You\'re performing too many requests! Slow down! 500 | Internal Server Error - We had a problem with our server. Try again later. 503 | Service Unavailable - We\'re temporarily offline for maintenance. Please try again later. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IdResponse } from '../model';
// @ts-ignore
import { TestCaseCreate } from '../model';
// @ts-ignore
import { TestCaseListResponse } from '../model';
// @ts-ignore
import { TestCaseResponse } from '../model';
// @ts-ignore
import { TestCaseUpdate } from '../model';
/**
 * CasesApi - axios parameter creator
 * @export
 */
export const CasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method allows to create a new test case in selected project. 
         * @summary Create a new test case.
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseCreate} testCaseCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCase: async (code: string, testCaseCreate: TestCaseCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('createCase', 'code', code)
            // verify required parameter 'testCaseCreate' is not null or undefined
            assertParamExists('createCase', 'testCaseCreate', testCaseCreate)
            const localVarPath = `/case/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testCaseCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method completely deletes a test case from repository. 
         * @summary Delete test case.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCase: async (code: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('deleteCase', 'code', code)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCase', 'id', id)
            const localVarPath = `/case/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows to retrieve a specific test case. 
         * @summary Get a specific test case.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCase: async (code: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getCase', 'code', code)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCase', 'id', id)
            const localVarPath = `/case/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows to retrieve all test cases stored in selected project. 
         * @summary Get all test cases.
         * @param {string} code Code of project, where to search entities.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {object} [filters] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCases: async (code: string, limit?: number, offset?: number, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getCases', 'code', code)
            const localVarPath = `/case/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method updates a test case. 
         * @summary Update test case.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {TestCaseUpdate} testCaseUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCase: async (code: string, id: number, testCaseUpdate: TestCaseUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updateCase', 'code', code)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCase', 'id', id)
            // verify required parameter 'testCaseUpdate' is not null or undefined
            assertParamExists('updateCase', 'testCaseUpdate', testCaseUpdate)
            const localVarPath = `/case/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testCaseUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CasesApi - functional programming interface
 * @export
 */
export const CasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CasesApiAxiosParamCreator(configuration)
    return {
        /**
         * This method allows to create a new test case in selected project. 
         * @summary Create a new test case.
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseCreate} testCaseCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCase(code: string, testCaseCreate: TestCaseCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCase(code, testCaseCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method completely deletes a test case from repository. 
         * @summary Delete test case.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCase(code: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCase(code, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows to retrieve a specific test case. 
         * @summary Get a specific test case.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCase(code: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCase(code, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows to retrieve all test cases stored in selected project. 
         * @summary Get all test cases.
         * @param {string} code Code of project, where to search entities.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {object} [filters] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCases(code: string, limit?: number, offset?: number, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCaseListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCases(code, limit, offset, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method updates a test case. 
         * @summary Update test case.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {TestCaseUpdate} testCaseUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCase(code: string, id: number, testCaseUpdate: TestCaseUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCase(code, id, testCaseUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CasesApi - factory interface
 * @export
 */
export const CasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CasesApiFp(configuration)
    return {
        /**
         * This method allows to create a new test case in selected project. 
         * @summary Create a new test case.
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseCreate} testCaseCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCase(code: string, testCaseCreate: TestCaseCreate, options?: any): AxiosPromise<IdResponse> {
            return localVarFp.createCase(code, testCaseCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method completely deletes a test case from repository. 
         * @summary Delete test case.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCase(code: string, id: number, options?: any): AxiosPromise<IdResponse> {
            return localVarFp.deleteCase(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve a specific test case. 
         * @summary Get a specific test case.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCase(code: string, id: number, options?: any): AxiosPromise<TestCaseResponse> {
            return localVarFp.getCase(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve all test cases stored in selected project. 
         * @summary Get all test cases.
         * @param {string} code Code of project, where to search entities.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {object} [filters] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCases(code: string, limit?: number, offset?: number, filters?: object, options?: any): AxiosPromise<TestCaseListResponse> {
            return localVarFp.getCases(code, limit, offset, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method updates a test case. 
         * @summary Update test case.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {TestCaseUpdate} testCaseUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCase(code: string, id: number, testCaseUpdate: TestCaseUpdate, options?: any): AxiosPromise<IdResponse> {
            return localVarFp.updateCase(code, id, testCaseUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CasesApi - object-oriented interface
 * @export
 * @class CasesApi
 * @extends {BaseAPI}
 */
export class CasesApi extends BaseAPI {
    /**
     * This method allows to create a new test case in selected project. 
     * @summary Create a new test case.
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseCreate} testCaseCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    public createCase(code: string, testCaseCreate: TestCaseCreate, options?: AxiosRequestConfig) {
        return CasesApiFp(this.configuration).createCase(code, testCaseCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method completely deletes a test case from repository. 
     * @summary Delete test case.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    public deleteCase(code: string, id: number, options?: AxiosRequestConfig) {
        return CasesApiFp(this.configuration).deleteCase(code, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows to retrieve a specific test case. 
     * @summary Get a specific test case.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    public getCase(code: string, id: number, options?: AxiosRequestConfig) {
        return CasesApiFp(this.configuration).getCase(code, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows to retrieve all test cases stored in selected project. 
     * @summary Get all test cases.
     * @param {string} code Code of project, where to search entities.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {object} [filters] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    public getCases(code: string, limit?: number, offset?: number, filters?: object, options?: AxiosRequestConfig) {
        return CasesApiFp(this.configuration).getCases(code, limit, offset, filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method updates a test case. 
     * @summary Update test case.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {TestCaseUpdate} testCaseUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    public updateCase(code: string, id: number, testCaseUpdate: TestCaseUpdate, options?: AxiosRequestConfig) {
        return CasesApiFp(this.configuration).updateCase(code, id, testCaseUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
