/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IdResponse } from '../model';
// @ts-ignore
import { MilestoneCreate } from '../model';
// @ts-ignore
import { MilestoneListResponse } from '../model';
// @ts-ignore
import { MilestoneResponse } from '../model';
// @ts-ignore
import { MilestoneUpdate } from '../model';
/**
 * MilestonesApi - axios parameter creator
 * @export
 */
export const MilestonesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method allows to create a milestone in selected project. 
         * @summary Create a new milestone.
         * @param {string} code Code of project, where to search entities.
         * @param {MilestoneCreate} milestoneCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMilestone: async (code: string, milestoneCreate: MilestoneCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('createMilestone', 'code', code)
            // verify required parameter 'milestoneCreate' is not null or undefined
            assertParamExists('createMilestone', 'milestoneCreate', milestoneCreate)
            const localVarPath = `/milestone/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(milestoneCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method completely deletes a milestone from repository. 
         * @summary Delete milestone.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone: async (code: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('deleteMilestone', 'code', code)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMilestone', 'id', id)
            const localVarPath = `/milestone/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows to retrieve a specific milestone. 
         * @summary Get a specific milestone.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMilestone: async (code: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getMilestone', 'code', code)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMilestone', 'id', id)
            const localVarPath = `/milestone/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows to retrieve all milestones stored in selected project. 
         * @summary Get all milestones.
         * @param {string} code Code of project, where to search entities.
         * @param {object} [filters] 
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMilestones: async (code: string, filters?: object, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getMilestones', 'code', code)
            const localVarPath = `/milestone/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method updates a milestone. 
         * @summary Update milestone.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {MilestoneUpdate} milestoneUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestone: async (code: string, id: number, milestoneUpdate: MilestoneUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updateMilestone', 'code', code)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMilestone', 'id', id)
            // verify required parameter 'milestoneUpdate' is not null or undefined
            assertParamExists('updateMilestone', 'milestoneUpdate', milestoneUpdate)
            const localVarPath = `/milestone/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(milestoneUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MilestonesApi - functional programming interface
 * @export
 */
export const MilestonesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MilestonesApiAxiosParamCreator(configuration)
    return {
        /**
         * This method allows to create a milestone in selected project. 
         * @summary Create a new milestone.
         * @param {string} code Code of project, where to search entities.
         * @param {MilestoneCreate} milestoneCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMilestone(code: string, milestoneCreate: MilestoneCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMilestone(code, milestoneCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method completely deletes a milestone from repository. 
         * @summary Delete milestone.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMilestone(code: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMilestone(code, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows to retrieve a specific milestone. 
         * @summary Get a specific milestone.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMilestone(code: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MilestoneResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMilestone(code, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows to retrieve all milestones stored in selected project. 
         * @summary Get all milestones.
         * @param {string} code Code of project, where to search entities.
         * @param {object} [filters] 
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMilestones(code: string, filters?: object, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MilestoneListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMilestones(code, filters, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method updates a milestone. 
         * @summary Update milestone.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {MilestoneUpdate} milestoneUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMilestone(code: string, id: number, milestoneUpdate: MilestoneUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMilestone(code, id, milestoneUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MilestonesApi - factory interface
 * @export
 */
export const MilestonesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MilestonesApiFp(configuration)
    return {
        /**
         * This method allows to create a milestone in selected project. 
         * @summary Create a new milestone.
         * @param {string} code Code of project, where to search entities.
         * @param {MilestoneCreate} milestoneCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMilestone(code: string, milestoneCreate: MilestoneCreate, options?: any): AxiosPromise<IdResponse> {
            return localVarFp.createMilestone(code, milestoneCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method completely deletes a milestone from repository. 
         * @summary Delete milestone.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone(code: string, id: number, options?: any): AxiosPromise<IdResponse> {
            return localVarFp.deleteMilestone(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve a specific milestone. 
         * @summary Get a specific milestone.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMilestone(code: string, id: number, options?: any): AxiosPromise<MilestoneResponse> {
            return localVarFp.getMilestone(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve all milestones stored in selected project. 
         * @summary Get all milestones.
         * @param {string} code Code of project, where to search entities.
         * @param {object} [filters] 
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMilestones(code: string, filters?: object, limit?: number, offset?: number, options?: any): AxiosPromise<MilestoneListResponse> {
            return localVarFp.getMilestones(code, filters, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * This method updates a milestone. 
         * @summary Update milestone.
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {MilestoneUpdate} milestoneUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestone(code: string, id: number, milestoneUpdate: MilestoneUpdate, options?: any): AxiosPromise<IdResponse> {
            return localVarFp.updateMilestone(code, id, milestoneUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MilestonesApi - object-oriented interface
 * @export
 * @class MilestonesApi
 * @extends {BaseAPI}
 */
export class MilestonesApi extends BaseAPI {
    /**
     * This method allows to create a milestone in selected project. 
     * @summary Create a new milestone.
     * @param {string} code Code of project, where to search entities.
     * @param {MilestoneCreate} milestoneCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    public createMilestone(code: string, milestoneCreate: MilestoneCreate, options?: AxiosRequestConfig) {
        return MilestonesApiFp(this.configuration).createMilestone(code, milestoneCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method completely deletes a milestone from repository. 
     * @summary Delete milestone.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    public deleteMilestone(code: string, id: number, options?: AxiosRequestConfig) {
        return MilestonesApiFp(this.configuration).deleteMilestone(code, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows to retrieve a specific milestone. 
     * @summary Get a specific milestone.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    public getMilestone(code: string, id: number, options?: AxiosRequestConfig) {
        return MilestonesApiFp(this.configuration).getMilestone(code, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows to retrieve all milestones stored in selected project. 
     * @summary Get all milestones.
     * @param {string} code Code of project, where to search entities.
     * @param {object} [filters] 
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    public getMilestones(code: string, filters?: object, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return MilestonesApiFp(this.configuration).getMilestones(code, filters, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method updates a milestone. 
     * @summary Update milestone.
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {MilestoneUpdate} milestoneUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    public updateMilestone(code: string, id: number, milestoneUpdate: MilestoneUpdate, options?: AxiosRequestConfig) {
        return MilestonesApiFp(this.configuration).updateMilestone(code, id, milestoneUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
