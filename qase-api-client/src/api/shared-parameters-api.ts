/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SharedParameterCreate } from '../model';
// @ts-ignore
import { SharedParameterListResponse } from '../model';
// @ts-ignore
import { SharedParameterResponse } from '../model';
// @ts-ignore
import { SharedParameterUpdate } from '../model';
// @ts-ignore
import { UuidResponse } from '../model';
/**
 * SharedParametersApi - axios parameter creator
 * @export
 */
export const SharedParametersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new shared parameter
         * @param {SharedParameterCreate} sharedParameterCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSharedParameter: async (sharedParameterCreate: SharedParameterCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sharedParameterCreate' is not null or undefined
            assertParamExists('createSharedParameter', 'sharedParameterCreate', sharedParameterCreate)
            const localVarPath = `/shared_parameter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sharedParameterCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete shared parameter along with all its usages in test cases and reviews.
         * @summary Delete shared parameter
         * @param {string} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSharedParameter: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSharedParameter', 'id', id)
            const localVarPath = `/shared_parameter/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific shared parameter
         * @param {string} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedParameter: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSharedParameter', 'id', id)
            const localVarPath = `/shared_parameter/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all shared parameters
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {string} [filtersSearch] 
         * @param {'single' | 'group'} [filtersType] 
         * @param {Array<string>} [filtersProjectCodes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedParameters: async (limit?: number, offset?: number, filtersSearch?: string, filtersType?: 'single' | 'group', filtersProjectCodes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shared_parameter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filtersSearch !== undefined) {
                localVarQueryParameter['filters[search]'] = filtersSearch;
            }

            if (filtersType !== undefined) {
                localVarQueryParameter['filters[type]'] = filtersType;
            }

            if (filtersProjectCodes) {
                localVarQueryParameter['filters[project_codes][]'] = filtersProjectCodes.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update shared parameter
         * @param {string} id Identifier.
         * @param {SharedParameterUpdate} sharedParameterUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSharedParameter: async (id: string, sharedParameterUpdate: SharedParameterUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSharedParameter', 'id', id)
            // verify required parameter 'sharedParameterUpdate' is not null or undefined
            assertParamExists('updateSharedParameter', 'sharedParameterUpdate', sharedParameterUpdate)
            const localVarPath = `/shared_parameter/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sharedParameterUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SharedParametersApi - functional programming interface
 * @export
 */
export const SharedParametersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SharedParametersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new shared parameter
         * @param {SharedParameterCreate} sharedParameterCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSharedParameter(sharedParameterCreate: SharedParameterCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSharedParameter(sharedParameterCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete shared parameter along with all its usages in test cases and reviews.
         * @summary Delete shared parameter
         * @param {string} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSharedParameter(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSharedParameter(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a specific shared parameter
         * @param {string} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSharedParameter(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SharedParameterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSharedParameter(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all shared parameters
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {string} [filtersSearch] 
         * @param {'single' | 'group'} [filtersType] 
         * @param {Array<string>} [filtersProjectCodes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSharedParameters(limit?: number, offset?: number, filtersSearch?: string, filtersType?: 'single' | 'group', filtersProjectCodes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SharedParameterListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSharedParameters(limit, offset, filtersSearch, filtersType, filtersProjectCodes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update shared parameter
         * @param {string} id Identifier.
         * @param {SharedParameterUpdate} sharedParameterUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSharedParameter(id: string, sharedParameterUpdate: SharedParameterUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSharedParameter(id, sharedParameterUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SharedParametersApi - factory interface
 * @export
 */
export const SharedParametersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SharedParametersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new shared parameter
         * @param {SharedParameterCreate} sharedParameterCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSharedParameter(sharedParameterCreate: SharedParameterCreate, options?: any): AxiosPromise<UuidResponse> {
            return localVarFp.createSharedParameter(sharedParameterCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete shared parameter along with all its usages in test cases and reviews.
         * @summary Delete shared parameter
         * @param {string} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSharedParameter(id: string, options?: any): AxiosPromise<UuidResponse> {
            return localVarFp.deleteSharedParameter(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific shared parameter
         * @param {string} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedParameter(id: string, options?: any): AxiosPromise<SharedParameterResponse> {
            return localVarFp.getSharedParameter(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all shared parameters
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {string} [filtersSearch] 
         * @param {'single' | 'group'} [filtersType] 
         * @param {Array<string>} [filtersProjectCodes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharedParameters(limit?: number, offset?: number, filtersSearch?: string, filtersType?: 'single' | 'group', filtersProjectCodes?: Array<string>, options?: any): AxiosPromise<SharedParameterListResponse> {
            return localVarFp.getSharedParameters(limit, offset, filtersSearch, filtersType, filtersProjectCodes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update shared parameter
         * @param {string} id Identifier.
         * @param {SharedParameterUpdate} sharedParameterUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSharedParameter(id: string, sharedParameterUpdate: SharedParameterUpdate, options?: any): AxiosPromise<UuidResponse> {
            return localVarFp.updateSharedParameter(id, sharedParameterUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SharedParametersApi - object-oriented interface
 * @export
 * @class SharedParametersApi
 * @extends {BaseAPI}
 */
export class SharedParametersApi extends BaseAPI {
    /**
     * 
     * @summary Create a new shared parameter
     * @param {SharedParameterCreate} sharedParameterCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedParametersApi
     */
    public createSharedParameter(sharedParameterCreate: SharedParameterCreate, options?: AxiosRequestConfig) {
        return SharedParametersApiFp(this.configuration).createSharedParameter(sharedParameterCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete shared parameter along with all its usages in test cases and reviews.
     * @summary Delete shared parameter
     * @param {string} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedParametersApi
     */
    public deleteSharedParameter(id: string, options?: AxiosRequestConfig) {
        return SharedParametersApiFp(this.configuration).deleteSharedParameter(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific shared parameter
     * @param {string} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedParametersApi
     */
    public getSharedParameter(id: string, options?: AxiosRequestConfig) {
        return SharedParametersApiFp(this.configuration).getSharedParameter(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all shared parameters
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {string} [filtersSearch] 
     * @param {'single' | 'group'} [filtersType] 
     * @param {Array<string>} [filtersProjectCodes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedParametersApi
     */
    public getSharedParameters(limit?: number, offset?: number, filtersSearch?: string, filtersType?: 'single' | 'group', filtersProjectCodes?: Array<string>, options?: AxiosRequestConfig) {
        return SharedParametersApiFp(this.configuration).getSharedParameters(limit, offset, filtersSearch, filtersType, filtersProjectCodes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update shared parameter
     * @param {string} id Identifier.
     * @param {SharedParameterUpdate} sharedParameterUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedParametersApi
     */
    public updateSharedParameter(id: string, sharedParameterUpdate: SharedParameterUpdate, options?: AxiosRequestConfig) {
        return SharedParametersApiFp(this.configuration).updateSharedParameter(id, sharedParameterUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
